package sc.rocketmq.bitwise;

public class TestBitwise {
    public static void main(String[] args) {
        int a = 1;
        int b = 3;
        int c = 2;

        //and运算通常用于二进制的取位操作
        //相同位的两个数字都为1，则为1；若有一个不为1，则为0。
        int i = a & b;  //1

        //判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数。
        int i1 = a & 1; //1


        //or运算通常用于二进制特定位上的无条件赋值
        // or 1的结果就是把二进制最末位强行变成1
        int i2 = c | 1; //3


        // 需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。
        int i3 = c | 1; //3


        //符号是^  ,按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作。操作的结果是如果某位不同则该位为1, 否则该位为0.
        // 两次异或同一个数最后结果不变，即（a xor b) xor b = a

        //xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。
        // 1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。
        int i4 = 1314520 ^ 19880516; //20665500

        int i5 = i4 ^ 19880516;  //1314520


        //相同位不同则为1，相同则为0。
        int i6 = a ^ a;  //0
        int i7 = a ^ c;  //3


        //not运算 ~  定义是把内存中的0和1全部取反
        int i8 = ~a;  //-2

    }
}
